"""
Behavioral Analysis Module
State 2: Behavioral Analysis for Malware Agent
Provides detailed process behavior, system modifications, registry changes, and network communications
"""

import logging
import json
import asyncio
from typing import Dict, Any, List, Optional, Set, Tuple
from datetime import datetime, timedelta
import re
import ipaddress
from pathlib import Path

logger = logging.getLogger(__name__)

class BehavioralAnalyzer:
    """
    Behavioral Analysis for malware detection
    Analyzes process behavior, system modifications, and network communications
    """
    
    def __init__(self):
        self.suspicious_behaviors = self._load_suspicious_behaviors()
        self.registry_monitoring_keys = self._load_registry_keys()
        self.network_analysis_patterns = self._load_network_patterns()
        
    async def analyze_behavior(self, defender_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analyze behavioral patterns from Defender ATP data
        
        Args:
            defender_data: Microsoft Defender for Endpoint behavioral data
            
        Returns:
            Behavioral analysis results
        """
        logger.info("Starting behavioral analysis")
        
        analysis_results = {
            "process_behavior": {},
            "system_modifications": {},
            "registry_changes": {},
            "network_communications": {},
            "file_system_activities": {},
            "persistence_mechanisms": {},
            "privilege_escalation": {},
            "behavioral_score": 0.0,
            "analysis_timestamp": datetime.now()
        }
        
        try:
            # Process behavior analysis
            process_results = await self._analyze_process_behavior(defender_data)
            analysis_results["process_behavior"] = process_results
            
            # System modifications analysis
            system_results = await self._analyze_system_modifications(defender_data)
            analysis_results["system_modifications"] = system_results
            
            # Registry changes analysis
            registry_results = await self._analyze_registry_changes(defender_data)
            analysis_results["registry_changes"] = registry_results
            
            # Network communications analysis
            network_results = await self._analyze_network_communications(defender_data)
            analysis_results["network_communications"] = network_results
            
            # File system activities
            fs_results = await self._analyze_file_system_activities(defender_data)
            analysis_results["file_system_activities"] = fs_results
            
            # Persistence mechanisms
            persistence_results = await self._analyze_persistence_mechanisms(defender_data)
            analysis_results["persistence_mechanisms"] = persistence_results
            
            # Privilege escalation
            privilege_results = await self._analyze_privilege_escalation(defender_data)
            analysis_results["privilege_escalation"] = privilege_results
            
            # Calculate behavioral score
            behavioral_score = await self._calculate_behavioral_score(analysis_results)
            analysis_results["behavioral_score"] = behavioral_score
            
            logger.info(f"Behavioral analysis completed with score: {behavioral_score}")
            
        except Exception as e:
            logger.error(f"Error in behavioral analysis: {str(e)}")
            analysis_results["error"] = str(e)
            
        return analysis_results
    
    async def _analyze_process_behavior(self, defender_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze process execution patterns and behaviors"""
        process_behavior = {
            "process_tree": [],
            "suspicious_processes": [],
            "command_line_analysis": {},
            "process_injection": [],
            "hollowing_indicators": [],
            "execution_patterns": {}
        }
        
        # Extract process events from Defender data
        process_events = self._extract_process_events(defender_data)
        
        # Build process tree
        process_behavior["process_tree"] = await self._build_process_tree(process_events)
        
        # Identify suspicious processes
        process_behavior["suspicious_processes"] = await self._identify_suspicious_processes(process_events)
        
        # Analyze command lines
        process_behavior["command_line_analysis"] = await self._analyze_command_lines(process_events)
        
        # Detect process injection
        process_behavior["process_injection"] = await self._detect_process_injection(process_events)
        
        # Detect process hollowing
        process_behavior["hollowing_indicators"] = await self._detect_process_hollowing(process_events)
        
        # Analyze execution patterns
        process_behavior["execution_patterns"] = await self._analyze_execution_patterns(process_events)
        
        return process_behavior
    
    async def _analyze_system_modifications(self, defender_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze system-level modifications"""
        system_modifications = {
            "service_modifications": [],
            "scheduled_tasks": [],
            "startup_modifications": [],
            "system_file_changes": [],
            "driver_installations": [],
            "security_policy_changes": []
        }
        
        # Extract system events
        system_events = self._extract_system_events(defender_data)
        
        # Analyze service modifications
        system_modifications["service_modifications"] = await self._analyze_service_modifications(system_events)
        
        # Analyze scheduled tasks
        system_modifications["scheduled_tasks"] = await self._analyze_scheduled_tasks(system_events)
        
        # Analyze startup modifications
        system_modifications["startup_modifications"] = await self._analyze_startup_modifications(system_events)
        
        # Analyze system file changes
        system_modifications["system_file_changes"] = await self._analyze_system_file_changes(system_events)
        
        # Analyze driver installations
        system_modifications["driver_installations"] = await self._analyze_driver_installations(system_events)
        
        # Analyze security policy changes
        system_modifications["security_policy_changes"] = await self._analyze_security_policy_changes(system_events)
        
        return system_modifications
    
    async def _analyze_registry_changes(self, defender_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze registry modifications"""
        registry_changes = {
            "persistence_keys": [],
            "security_keys": [],
            "configuration_keys": [],
            "suspicious_values": [],
            "autorun_entries": [],
            "policy_modifications": []
        }
        
        # Extract registry events
        registry_events = self._extract_registry_events(defender_data)
        
        # Analyze persistence keys
        registry_changes["persistence_keys"] = await self._analyze_persistence_keys(registry_events)
        
        # Analyze security-related keys
        registry_changes["security_keys"] = await self._analyze_security_keys(registry_events)
        
        # Analyze configuration keys
        registry_changes["configuration_keys"] = await self._analyze_configuration_keys(registry_events)
        
        # Identify suspicious values
        registry_changes["suspicious_values"] = await self._identify_suspicious_values(registry_events)
        
        # Analyze autorun entries
        registry_changes["autorun_entries"] = await self._analyze_autorun_entries(registry_events)
        
        # Analyze policy modifications
        registry_changes["policy_modifications"] = await self._analyze_policy_modifications(registry_events)
        
        return registry_changes
    
    async def _analyze_network_communications(self, defender_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze network communication patterns"""
        network_communications = {
            "outbound_connections": [],
            "suspicious_domains": [],
            "c2_indicators": [],
            "data_exfiltration": [],
            "port_scanning": [],
            "dns_queries": []
        }
        
        # Extract network events
        network_events = self._extract_network_events(defender_data)
        
        # Analyze outbound connections
        network_communications["outbound_connections"] = await self._analyze_outbound_connections(network_events)
        
        # Identify suspicious domains
        network_communications["suspicious_domains"] = await self._identify_suspicious_domains(network_events)
        
        # Detect C2 indicators
        network_communications["c2_indicators"] = await self._detect_c2_indicators(network_events)
        
        # Detect data exfiltration
        network_communications["data_exfiltration"] = await self._detect_data_exfiltration(network_events)
        
        # Detect port scanning
        network_communications["port_scanning"] = await self._detect_port_scanning(network_events)
        
        # Analyze DNS queries
        network_communications["dns_queries"] = await self._analyze_dns_queries(network_events)
        
        return network_communications
    
    async def _analyze_file_system_activities(self, defender_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze file system activities"""
        fs_activities = {
            "file_creations": [],
            "file_deletions": [],
            "file_modifications": [],
            "executable_drops": [],
            "temporary_file_usage": [],
            "encryption_activities": []
        }
        
        # Extract file system events
        fs_events = self._extract_file_system_events(defender_data)
        
        # Analyze file creations
        fs_activities["file_creations"] = await self._analyze_file_creations(fs_events)
        
        # Analyze file deletions
        fs_activities["file_deletions"] = await self._analyze_file_deletions(fs_events)
        
        # Analyze file modifications
        fs_activities["file_modifications"] = await self._analyze_file_modifications(fs_events)
        
        # Detect executable drops
        fs_activities["executable_drops"] = await self._detect_executable_drops(fs_events)
        
        # Analyze temporary file usage
        fs_activities["temporary_file_usage"] = await self._analyze_temporary_file_usage(fs_events)
        
        # Detect encryption activities
        fs_activities["encryption_activities"] = await self._detect_encryption_activities(fs_events)
        
        return fs_activities
    
    async def _analyze_persistence_mechanisms(self, defender_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze persistence establishment mechanisms"""
        persistence_mechanisms = {
            "registry_persistence": [],
            "service_persistence": [],
            "scheduled_task_persistence": [],
            "startup_folder_persistence": [],
            "wmi_persistence": [],
            "dll_hijacking": []
        }
        
        # Analyze different persistence methods
        persistence_mechanisms["registry_persistence"] = await self._detect_registry_persistence(defender_data)
        persistence_mechanisms["service_persistence"] = await self._detect_service_persistence(defender_data)
        persistence_mechanisms["scheduled_task_persistence"] = await self._detect_scheduled_task_persistence(defender_data)
        persistence_mechanisms["startup_folder_persistence"] = await self._detect_startup_folder_persistence(defender_data)
        persistence_mechanisms["wmi_persistence"] = await self._detect_wmi_persistence(defender_data)
        persistence_mechanisms["dll_hijacking"] = await self._detect_dll_hijacking(defender_data)
        
        return persistence_mechanisms
    
    async def _analyze_privilege_escalation(self, defender_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze privilege escalation attempts"""
        privilege_escalation = {
            "uac_bypass": [],
            "token_manipulation": [],
            "process_injection_privilege": [],
            "service_exploitation": [],
            "dll_injection": [],
            "privilege_escalation_score": 0.0
        }
        
        # Detect different privilege escalation methods
        privilege_escalation["uac_bypass"] = await self._detect_uac_bypass(defender_data)
        privilege_escalation["token_manipulation"] = await self._detect_token_manipulation(defender_data)
        privilege_escalation["process_injection_privilege"] = await self._detect_process_injection_privilege(defender_data)
        privilege_escalation["service_exploitation"] = await self._detect_service_exploitation(defender_data)
        privilege_escalation["dll_injection"] = await self._detect_dll_injection(defender_data)
        
        # Calculate privilege escalation score
        privilege_escalation["privilege_escalation_score"] = await self._calculate_privilege_escalation_score(privilege_escalation)
        
        return privilege_escalation
    
    async def _calculate_behavioral_score(self, analysis_results: Dict[str, Any]) -> float:
        """Calculate overall behavioral risk score"""
        score = 0.0
        max_score = 100.0
        
        # Process behavior scoring
        process_score = len(analysis_results["process_behavior"].get("suspicious_processes", [])) * 10
        score += min(process_score, 30)
        
        # System modifications scoring
        system_score = len(analysis_results["system_modifications"].get("service_modifications", [])) * 5
        score += min(system_score, 20)
        
        # Registry changes scoring
        registry_score = len(analysis_results["registry_changes"].get("persistence_keys", [])) * 8
        score += min(registry_score, 25)
        
        # Network communications scoring
        network_score = len(analysis_results["network_communications"].get("c2_indicators", [])) * 15
        score += min(network_score, 25)
        
        # Normalize score
        normalized_score = min(score / max_score, 1.0)
        
        return round(normalized_score, 3)
    
    # Helper methods for data extraction
    def _extract_process_events(self, defender_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract process events from Defender data"""
        events = []
        
        # Extract from various sources in Defender data
        if "events" in defender_data:
            for event in defender_data["events"]:
                if event.get("eventType") == "ProcessCreated":
                    events.append(event)
        
        return events
    
    def _extract_system_events(self, defender_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract system events from Defender data"""
        events = []
        
        if "events" in defender_data:
            for event in defender_data["events"]:
                if event.get("eventType") in ["ServiceInstalled", "ScheduledTaskCreated", "DriverLoaded"]:
                    events.append(event)
        
        return events
    
    def _extract_registry_events(self, defender_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract registry events from Defender data"""
        events = []
        
        if "events" in defender_data:
            for event in defender_data["events"]:
                if event.get("eventType") == "RegistryValueSet":
                    events.append(event)
        
        return events
    
    def _extract_network_events(self, defender_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract network events from Defender data"""
        events = []
        
        if "events" in defender_data:
            for event in defender_data["events"]:
                if event.get("eventType") in ["NetworkConnectionMade", "DnsQuery"]:
                    events.append(event)
        
        return events
    
    def _extract_file_system_events(self, defender_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract file system events from Defender data"""
        events = []
        
        if "events" in defender_data:
            for event in defender_data["events"]:
                if event.get("eventType") in ["FileCreated", "FileDeleted", "FileModified"]:
                    events.append(event)
        
        return events
    
    # Load configuration methods
    def _load_suspicious_behaviors(self) -> Dict[str, Any]:
        """Load suspicious behavior patterns"""
        return {
            "suspicious_processes": [
                "powershell.exe", "cmd.exe", "wscript.exe", "cscript.exe",
                "rundll32.exe", "regsvr32.exe", "mshta.exe", "bitsadmin.exe"
            ],
            "suspicious_commands": [
                "Invoke-Expression", "DownloadString", "DownloadFile",
                "Start-Process", "New-Object", "System.Net.WebClient"
            ],
            "suspicious_paths": [
                "%TEMP%", "%APPDATA%", "%PUBLIC%", "C:\\Users\\Public"
            ]
        }
    
    def _load_registry_keys(self) -> List[str]:
        """Load registry keys for monitoring"""
        return [
            "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
            "HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
            "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce",
            "HKLM\\SYSTEM\\CurrentControlSet\\Services",
            "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon"
        ]
    
    def _load_network_patterns(self) -> Dict[str, Any]:
        """Load network analysis patterns"""
        return {
            "suspicious_ports": [4444, 5555, 6666, 7777, 8080, 8443, 9999],
            "c2_domains": [".tk", ".ml", ".ga", ".cf"],
            "suspicious_user_agents": ["python-requests", "curl", "wget"]
        }
    
    # Placeholder implementation methods (to be implemented based on specific requirements)
    async def _build_process_tree(self, events: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Build process execution tree"""
        return []
    
    async def _identify_suspicious_processes(self, events: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Identify suspicious processes"""
        return []
    
    async def _analyze_command_lines(self, events: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Analyze command line patterns"""
        return {}
    
    async def _detect_process_injection(self, events: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Detect process injection"""
        return []
    
    async def _detect_process_hollowing(self, events: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Detect process hollowing"""
        return []
    
    async def _analyze_execution_patterns(self, events: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Analyze execution patterns"""
        return {}

# Factory function
def create_behavioral_analyzer() -> BehavioralAnalyzer:
    """Create and return BehavioralAnalyzer instance"""
    return BehavioralAnalyzer()
